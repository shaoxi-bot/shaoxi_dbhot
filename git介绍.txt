特点
编辑
分布式相比于集中式的最大区别在于开发者可以提交到本地，每个开发者通过克隆（git clone），在本地机器上拷贝一个完整的Git仓库。
下图是经典的git开发过程。
Git的功能特性：
从一般开发者的角度来看，git有以下功能：
1、从服务器上克隆完整的Git仓库（包括代码和版本信息）到单机上。
2、在自己的机器上根据不同的开发目的，创建分支，修改代码。
3、在单机上自己创建的分支上提交代码。
4、在单机上合并分支。
5、把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。
6、生成补丁（patch），把补丁发送给主开发者。
7、看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者没有冲突，就通过。
8、一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再向主开发者提交补丁。
从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能：
1、查看邮件或者通过其它方式查看一般开发者的提交状态。
2、打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源项目，还要决定哪些补丁有用，哪些不用）。
3、向公共服务器提交结果，然后通知所有开发人员。
优点： 适合分布式开发，强调个体。
公共服务器压力和数据量都不会太大。
速度快、灵活。
任意两个开发者之间可以很容易的解决冲突。
离线工作。
缺点：
资料少（起码中文资料很少）。
学习周期相对而言比较长。
不符合常规思维。
代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。
介绍
编辑
Git --- The stupid content tracker, 傻瓜内容跟踪器。Linus Torvalds 是这样给我们介绍 Git 的。
Git 是用于 Linux内核开发的版本控制工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使源代码的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。
实际上内核开发团队决定开始开发和使用 Git 来作为内核开发的版本控制系统的时候，世界开源社群的反对声音不少，最大的理由是 Git 太艰涩难懂，从 Git 的内部工作机制来说，的确是这样。但是随着开发的深入，Git 的正常使用都由一些友好的脚本命令来执行，使 Git 变得非常好用，即使是用来管理我们自己的开发项目，Git 都是一个友好，有力的工具。现在，越来越多的著名项目采用 Git 来管理项目开发.
作为开源自由原教旨主义项目，Git 没有对版本库的浏览和修改做任何的权限限制。
目前GIT已经可以在windows下使用，主要方法有二：msysgit和Cygwin。Cygwin和Linux使用方法类似，Windows版本的GIT提供了友好的GUI(图形界面)，安装后很快可以上手，不在此做大篇幅介绍。
    本文将以 Git 官方文档 Tutorial， core-tutorial 和 Everyday GIT 作为蓝本翻译整理，但是暂时去掉了对 Git 内部工作机制的阐述，力求简明扼要，并加入了作者使用 Git 的过程中的一些心得体会，注意事项，以及更多的例子。建议你最好通过你所使用的 Unix / Linux 发行版的安装包来安装 Git, 你可以在线浏览本文 ，也可以通过下面的命令来得到本文最新的版本库，并且通过后面的学习用 Git 作为工具参加到本文的创作中来。
(Snake.Zero 注：以下假设环境为Unix/Linux，本次修正主要是版本问题，git-add git-init-db等命令都改为了类似git add形式的，以免误导新手。)
    创建一个版本库：
    1

    git init
( kwydwuf注: 新版 git 中应该用 git init ，不要再用 init-db 命令，具体可以通过命令 git help init 查看)
    可以了。现在我们来为本文的写作创建一个版本库：
    1
    2
    3
    4
    5

    $ mkdir gittutorcn

    $ cd gittutorcn

    $ git init
    git 将会作出以下的回应
    1
    2
    3

    Initialized empty Git repository in/[yourpath]/.git或
(Initialized empty Git repository in /Users/1a/gittutorcn/.git/
)
    这样，一个空的版本库就创建好了，并在当前目录中创建一个叫 .git 的子目录。你可以用 ls -a 查看一下，并请注意其中的三项内容：
    * 一个叫 HEAD 的文件，我们现在来查看一下它的内容：
    1

    $ cat.git/HEAD
    现在 HEAD 的内容应该是这样：
    1

    ref:refs/heads/master
    我们可以看到，HEAD 文件中的内容其实只是包含了一个索引信息，并且，这个索引将总是指向你的项目中的当前开发分支。
    * 一个叫 objects 的子目录，它包含了你的项目中的所有对象，我们不必直接地了解到这些对象内容，我们应该关心是存放在这些对象中的项目的数据。
    Note
    关于 git 对象的分类，以及 git 对象数据库的说明，请参看 [Discussion]
    * 一个叫 refs 的子目录，它用来保存指向对象的索引。
    具体地说，子目录 refs 包含着两个子目录叫 heads 和 tags，就像他们的名字所表达的意味一样：他们存放了不同的开发分支的头的索引, 或者是你用来标定版本的标签的索引。
    请注意：master 是默认的分支，这也是为什么 .git/HEAD 创建的时候就指向 master 的原因，尽管目前它其实并不存在。 git 将假设你会在 master 上开始并展开你以后的工作，除非你自己创建你自己的分支。
    另外，这只是一个约定俗成的习惯而已，实际上你可以将你的工作分支叫任何名字，而不必在版本库中一定要有一个叫 master 的分支，尽管很多 git 工具都认为 master 分支是存在的。
    现在已经创建好了一个 git 版本库，但是它是空的，还不能做任何事情，下一步就是怎么向版本库植入数据了。
    版  原始发行日期    最新版本    发布日期
    0.99    2005-07-11  0.99.9n 2005-12-15
    1.0 2005-12-21  1.0.13  2006-01-27
    1.1 2006-01-08  1.1.6   2006-01-30
    1.2 2006-02-12  1.2.6   2006-04-08
    1.3 2006-04-18  1.3.3   2006-05-16
    1.4 2006-06-10  1.4.4.5 2008-07-16
    1.5 2007-02-14  1.5.6.6 2008-12-17
    1.6 2008-08-17  1.6.6.3 2010-12-15
    1.7 2010-02-13  1.7.12.4    2012-10-17
    1.8 2012年10月21日  1.8.5.6 2014年12月17日
    1.9 2014年2月14日   1.9.5   2014年12月17日
    2.0 2014年5月28日   2.0.5   2014年12月17日
    2.1 2014年8月16日   2.1.4   2014年12月17日
    2.2 2014年11月26日  2.2.3   2015年9月4日
    2.3 2015年2月5日    2.3.10  2015年9月29日
    2.4 2015年4月30日   2.4.11  2016年3月17日
    2.5 2015年7月27日   2.5.5   2016年3月17日
    2.6 2015年9月28日   2.6.6   2016年3月17日 [2]
    2.7 2015年10月4日   2.7.4   2016年3月17日
    2.8 2016年3月28日   2.8.4   2016年6月6日
    2.9 2016年6月13日   2.9.3   2016年8月12日
    2.10    2016年9月2日    2.10    2016年9月2日
    2.13.3  2017年7月12日   2.13.3  2017年7月12日 [3]
    2.15.0
    2017年10月30日  2.15.0  2017年10月30日
    增加内容
    编辑
    增加内容跟踪信息：git add
    为了简明起见，我们创建两个文件作为练习：
    1
    2

    $echo"Helloworld">hello
    $echo"SnakeZero">snake
    我们再用 git add 命令将这两个文件加入到版本库文件索引当中：
    1

    $git add hello snake
    git add 实际上是个脚本命令，它是对 git 内核命令 git update-index 的调用。因此上面的命令和下面的命令其实是等价的：
    1

    $git update-index --add hello snake
    如果你要将某个文件从 git 的目录跟踪系统中清除出去，同样可以用 git update-index 命令。例如：
    1

    $git update-index --force-remove foo.c
    注意：
    git add 可以将某个目录下的所有内容全都纳入内容跟踪之下，例如： git add ./path/to/your/wanted 。但是在这样做之前，应该注意先将一些我们不希望跟踪的文件清理掉，例如，gcc 编译出来的 *.o 文件，vim 的交换文件 .*.swp 之类。
    应该建立一个清晰的概念就是，git add 和 git update-index 只是刷新了 git 的跟踪信息，hello 和 snake 这两个文件中的内容并没有提交到 git 的内容跟踪范畴之内。
    普通用户总是应该使用 git add， 而不要使用上面提到的 update-index内部命令。
    添加所有未跟踪文件用 git add -A, 添加所有未跟踪文件并且提交用 git commit -a。（注意大小写）
    从当前跟踪文件中删除用 git reset HEAD <filename>。事实上也就是用当前 HEAD（commited） 中的内容替换掉 index（staging） 的内容。
